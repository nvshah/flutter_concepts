Json in Dart : https://dart.dev/guides/libraries/library-tour#dartconvert---decoding-and-encoding-json-utf-8-and-more
Slivers : https://www.raywenderlich.com/19539821-slivers-in-flutter-getting-started

* LifeCycles & State :
  -----------
  createState
  initState
  didChangeDependencies  -> When properties passed of any inherited obj (ie dependencies) used inside State changes 
  didUpdateWidget  -> When values of param pass via Constructor changes by Parent
  build()  -> never do computationally heavy thinngs inside build
  dispose()

  setState()

* App LifeCycles :
  -----
   WidgetsBindingObservers
      - helps to track Routes as well 
      - Helps while app minimizes (ie move betweeb Foreground & background States)


TIP :- mounted
    Asynchronous code should always check if the mounted property is true before calling setstate(),
    because the widget may no longer be part of the widget tree.


* InheritedWidget :  (Scoped Access)
  -----------
   -> Immutable

      Many InheritedWidget will remain unchanged during whole lifecycle of app.
   
   1) access 
        // Go up the tree starting from build context & look for Type T of InheritedWidget type
       context.inheritFromWidgetOfExactType(T) 

   2)  notify 
       bool updateShouldNotify() 

   => Provider is just Wrapper around an InheritedWidget


* Json in Dart :
  ---------
   -> Only objects of type int, double, String, bool, null, List, or Map (with string keys) are directly encodable into JSON. 
   
   => List and Map objects are encoded recursively.


* Sliver :
  -----
   -> Sliver is kinda interface for Scrollable Widgets
   -> Portion of Scrollable Area | Custom Scrolling Effect  
   -> Slice of region that can be manipulated for custom scrolling way
   -> Main Benefits :- LaZily Load the items in scrollable area


   -> Slivers + CustomScrollView are good combo

  RenderBox :
  ---------
   Normal Widgets renders in a Box i.e RenderBox (i.e BoxConstraints)
    \
     Renderer uses those constraints & produce size for rendering widget

  Render Sliver Protocal
  --------
   -> Sliver Constraints -> Renderer -> Sliver Geometry
      
   => ListView already uses Sliver under the hood.

  3 Types of Sliver :
   -------
    Sliver - To - Sliver  : 
        Sliver on Outside & Sliver on Inside
        Eg SliverPadding

    Sliver - To - Box    : 
        Sliver on Outside & BoxRenderer on Inside
        Eg SliverAppBar 

    Sliver - To - Many Sliver :
        Sliver on Outside & Many on Inside
        Eg SliverList

    Sliver Creation req. 2 Classes :- 
        
        1. Render Class : performs rendering & layout
        2. Widget Class : Makes use of Render class to Widget tree

      => `Paint Cordinates` is relative to the Sliver's Local coordinates, not the scroll view 
      => `Scroll Offset` is the amount of logical pixels the current sliver box is scrolled out of view

    Paint Position is seperate from the Constraints Position :
      -> This means that we can paint widget at differently that actual located in the list

  NOTE -> Slivers has to be used in a Custom Scroll View


* You can provide Your Object In different part differently using :
  
   ScopedProvider(), ProviderScope() 
                         \
                          -> remembers all the providers added via RiverPod

   use override param avail in ProviderScope to change behaviour in diff part of apps.


* GestureDetector :
  -----
   -> Hit behaviour : Opaque, Translucent

* IndexedStack :  
  -----
  IndexedStack allows you to easily switch widgets in your app. 
  It only shows one child widget at a time, 
  but it preserves the state of all the children. 

* Navigator 1.0 :
  ------------

  -> Immperative style of Navigation management

  -> WidgetsApp :  

    Most Flutter apps start with WidgetsApp as the root widget.
    MaterialApp extends the WidgetsApp

    WidgetsApp wraps many other common widgets that your app requires. 
    Among these wrapped widgets are a top-level Navigator to manage the pages you push and pop.

 => Navigator 1.0 doesnâ€™t expose the route stack to developers
     - This makes it difficult to handle complicated cases, 
       like adding and removing a screen between pages.

   Cons : 
     Another disadvantage is that Navigator 1.0 does not update the web URL path.

     - on Android devices, the Back button might not work with Navigator 1.0 
       when you have nested navigators or when you add Flutter to your host Android app.

  => To remove Specific route :- you can also use 
         \
          removeRoute()

  Key Pitfalls :-
    1. Nested Navigations 
    2. Route Tracking 
    3. Manipulate Inbetween Routes
 
* Navigator 2.0 :
  -------------
   -> Declarative Navigation
   - Exposing Page Stack 
   - backward compatible
   - Handling OS events (android back button)
   - mannage nested navigators 
   - manage navigation state


* Shared Preferences :
  ----------
   Key Val Storage options

   Be aware that shared_preferences is not a good fit to store sensitive data.
   To store passwords or access tokens,
   check out the Android Keystore for Android and
   Keychain Services for iOS, or consider using the `flutter_secure_storage` plugin.

   Flutter_Secure_Storage


* TIPS :-
   Hide the keyboard by using the `FocusScope` class. 


* Flutter Hooks :
  ---------
   -> reduce & increase Code Reusability
   -> use hooks inside build() method only !
   -> UseEffect() hook is like decorator concept (ie takes function & return function)
   
   **
   => Hooks instead of sharing state with widget, each one run in an isolation !

   -> Its not intended for State management but for Code Sharing & Code Reusability.

   - useState, useEffect, useValueNotifier, useValueListenable 
     useMemoized

  -> HookBuilder :- allow you to use & listen to the Hooks 


[IMP]
* WidgetsBindingObserver :
  -----
   -> App LifeCycle management
   -> very handy for listening to changes to :
     - routing events 
     - device orientations
     - platform settings (text scale factor, brightness, locale, etc)
     - background, foreground tracing

* TextEditingController :
  ---
   TextSpan
   selection.baseoffset :- can give you cursor position
